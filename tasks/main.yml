---
- name: Download binary from MatterMost website
  get_url: 
    url: https://releases.mattermost.com/{{ mattermost_version }}/mattermost-team-{{ mattermost_version }}-linux-amd64.tar.gz
    dest: /tmp/
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version == "7") or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "16")

- name: Download binary from MatterMost website (using wget because get_url fails if system python is older than 2.7.5)
  command: "wget https://releases.mattermost.com/{{ mattermost_version }}/mattermost-team-{{ mattermost_version }}-linux-amd64.tar.gz"
  args:        
    chdir: /tmp/
    creates: /tmp/mattermost-team-{{ mattermost_version }}-linux-amd64.tar.gz
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version == "6") or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "14")

- name: unpack mattermost archive
  unarchive: 
    src: /tmp/mattermost-team-{{ mattermost_version }}-linux-amd64.tar.gz 
    dest: /opt/
    copy: no
  args:
    creates: /opt/mattermost/bin/platform

- name: Listen on public and private IP
  lineinfile:
    dest: /opt/mattermost/config/config.json
    line: '{{ item.line }}'
    regexp: '{{ item.regexp }}'
    backrefs: yes
  with_items:
    - { regexp: '"SiteURL":',                  line: '        "SiteURL": "{{ mattermost_config.SiteURL }}",' }
    - { regexp: '"DataSource":',               line: '        "DataSource": "{{ mattermost_db_user }}:{{ mattermost_db_password }}@tcp(127.0.0.1:3306)/{{ mattermost_db_name }}?charset=utf8mb4,utf8",' }
    - { regexp: '"MinimumLength":',            line: '        "MinimumLength": {{ mattermost_config.MinimumLength }},' }
    - { regexp: '"MaxFileSize":',              line: '        "MaxFileSize": {{ mattermost_config.MaxFileSize }},' }    
    - { regexp: '"EnableSignUpWithEmail":',    line: '        "EnableSignUpWithEmail": {{ mattermost_config.EnableSignUpWithEmail }},' }    
    - { regexp: '"EnableSignInWithEmail":',    line: '        "EnableSignInWithEmail": {{ mattermost_config.EnableSignInWithEmail }},' }       
    - { regexp: '"EnableSignInWithUsername":', line: '        "EnableSignInWithUsername": {{ mattermost_config.EnableSignInWithUsername }},' }    
    - { regexp: '"SendEmailNotifications":',   line: '        "SendEmailNotifications": {{ mattermost_config.SendEmailNotifications }},' }       
    - { regexp: '"RequireEmailVerification":', line: '        "RequireEmailVerification": {{ mattermost_config.RequireEmailVerification }},' }    
    - { regexp: '"FeedbackName":',             line: '        "FeedbackName": "{{ mattermost_config.FeedbackName }}",' }       
    - { regexp: '"FeedbackEmail":',            line: '        "FeedbackEmail": "{{ mattermost_config.FeedbackEmail }}",' }       
    - { regexp: '"FeedbackOrganization":',     line: '        "FeedbackOrganization": "{{ mattermost_config.FeedbackOrganization }}",' }       
    - { regexp: '"SMTPUsername":',             line: '        "SMTPUsername": "{{ mattermost_config.SMTPUsername }}",' }    
    - { regexp: '"SMTPPassword":',             line: '        "SMTPPassword": "{{ mattermost_config.SMTPPassword }}",' }    
    - { regexp: '"SMTPServer":',               line: '        "SMTPServer": "{{ mattermost_config.SMTPServer }}",' }    
    - { regexp: '"SMTPPort":',                 line: '        "SMTPPort": "{{ mattermost_config.SMTPPort }}",' }
    - { regexp: '"ConnectionSecurity":',       line: '        "ConnectionSecurity": "{{ mattermost_config.ConnectionSecurity }}",' }            
    - { regexp: '"SendPushNotifications":',    line: '        "SendPushNotifications": {{ mattermost_config.SendPushNotifications }},' }       
    - { regexp: '"PushNotificationServer":',   line: '        "PushNotificationServer": "{{ mattermost_config.PushNotificationServer }}",' }    
    - { regexp: '"PushNotificationContents":', line: '        "PushNotificationContents": "{{ mattermost_config.PushNotificationContents }}",' }       
    - { regexp: '"EnableEmailBatching":',      line: '        "EnableEmailBatching": {{ mattermost_config.EnableEmailBatching }},' }
    - { regexp: '"MaxUsersPerTeam":',          line: '        "MaxUsersPerTeam": {{ mattermost_config.MaxUsersPerTeam }},' }        
    - { regexp: '"EnableTeamCreation":',       line: '        "EnableTeamCreation": {{ mattermost_config.EnableTeamCreation }},' }        
    - { regexp: '"EnableUserCreation":',       line: '        "EnableUserCreation": {{ mattermost_config.EnableUserCreation }},' }
    - { regexp: '"EnableOpenServer":',         line: '        "EnableOpenServer": {{ mattermost_config.EnableOpenServer }},' }                
    - { regexp: '"RestrictTeamNames":',        line: '        "RestrictTeamNames": {{ mattermost_config.RestrictTeamNames }},' }                
    - { regexp: '"EnablePublicLink":',         line: '        "EnablePublicLink": {{ mattermost_config.EnablePublicLink }},' }
    - { regexp: '"EnableOnlyAdminIntegrations":', line: '     "EnableOnlyAdminIntegrations": {{ mattermost_config.EnableOnlyAdminIntegrations }},' }
    - { regexp: '"EnableCustomEmoji":',        line: '        "EnableCustomEmoji": {{ mattermost_config.EnableCustomEmoji }},' }
    notify:
    - restart mattermost

- name: Create mattermost user
  user: 
    name: "{{ mattermost_user }}"
    system: yes
    createhome: no

- name: Create mattermost systemd service (Ubuntu 16.04, RHEL/CentOS 7)
  template:
    src: mattermost.service.j2
    dest: /etc/systemd/system/mattermost.service
    owner: root
    group: root
    mode: 0664
  when: (ansible_os_family  == "RedHat" and ansible_distribution_major_version == "7") or (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "16")  

- name: Change mattermost directory permissions
  file:
    path: /opt/mattermost
    state: directory
    owner: "{{ mattermost_user }}"
    group: "{{ mattermost_user }}"
    recurse: yes

- name: Install the latest postfix
  package: name=postfix state=latest

  
# MIGHT BE DEBIAN SPECIFIC (start)  
- name: "Ensuring /etc/mailname is present"
  template:
    src: mailname.j2
    dest: "/etc/mailname"
    mode: 0644
    owner: root
    group: root
  notify:
    - restart postfix
    
- name: "Ensure /etc/postfix/main.cf has myorigin set"
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '#myorigin = /etc/mailname'
    line: 'myorigin = /etc/mailname'
# MIGHT BE DEBIAN SPECIFIC (end)    

# TODO Install Nginx proxy file